from raspserver import app
from flask import jsonify, request, make_response
import datetime, time

# Temperature list
global_dict = {
    'temperature': []
}

""" Main resource for sensor server API.

Method: GET
Success: Returns JSON response with 200 status

"""
@app.route('/')
def index():
    resp = jsonify({'message':'Welcome to sensor server!'})
    resp.status_code = 200
    return resp

""" Get sensor temperature value from dictionary list.

Method: GET
Success: Returns JSON response with 200 status

If there isn't any temperature in list, return an empty object.
Otherwise, return an object temperature with value and scale.

Response Model: temperature: {'value': 25, 'scale': 'degrees'},
                timestamp: 1510667612.0

"""

@app.route('/read')
def read():
    # Check if temperature list is empty
    if not global_dict['temperature']:
        temp = {}
    # Get first element from temperature list, and then pop it from list
    else:
        temp = [t for t in global_dict['temperature']][0]
        global_dict['temperature'].pop(0)
    
    data = {
        'timestamp':time.mktime(datetime.datetime.now().timetuple()),
        'temperature':temp
    }
    resp = jsonify(data)
    resp.status_code = 200
    return resp

""" Store sensor temperature value in dictionary list.

Method: POST
Success: Returns JSON response with 200 status
Error: Returns JSON response with 400 status and message

If temperature is empty, scale or temperature aren't declared,
return an error to request.
Otherwise, return a success request with sent temperature.

Request Model: {'value': 25, 'scale': 'degrees'}

"""

@app.route('/load', methods=['POST'])
def load():
    # Receive temperature value from server
    temp = request.get_json()
    # Check for object existence and params inside
    if not temp:
        data = jsonify({'error':'No temperature object sent!'})
        resp = make_response(data, 400)
        return resp
    elif 'value' not in temp:
        data = jsonify({'error':'Insert temperature value!'})
        resp = make_response(data, 400)
        return resp
    elif 'scale' not in temp:
        data = jsonify({'error':'Insert temperature scale!'})
        resp = make_response(data, 400)
        return resp

    # Append temperature in list
    global_dict['temperature'].append(temp)

    # Return success to client with temperature
    resp = jsonify(temp)
    resp.status_code = 200
    return resp